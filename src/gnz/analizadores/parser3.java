
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gnz.analizadores;

import java_cup.runtime.*;
import gnz.backend.objetoMovil.MovimientoBase;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser3 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym3.class;
}

  /** Default constructor. */
  @Deprecated
  public parser3() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser3(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\007\000\002\004" +
    "\004\000\002\004\003\000\002\005\013\000\002\005\013" +
    "\000\002\005\013\000\002\005\013\000\002\003\003\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\010\005\001\002\000\004\002\062\001" +
    "\002\000\004\012\006\001\002\000\012\013\014\014\013" +
    "\015\011\016\010\001\002\000\014\011\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\001\002\000\004\005\052\001\002" +
    "\000\004\005\042\001\002\000\014\011\037\013\014\014" +
    "\013\015\011\016\010\001\002\000\004\005\027\001\002" +
    "\000\004\005\015\001\002\000\004\007\016\001\002\000" +
    "\004\021\017\001\002\000\004\004\020\001\002\000\004" +
    "\007\021\001\002\000\004\004\022\001\002\000\006\017" +
    "\024\020\025\001\002\000\004\006\026\001\002\000\004" +
    "\006\ufff9\001\002\000\004\006\ufff8\001\002\000\014\011" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\001\002\000\004" +
    "\007\030\001\002\000\004\021\031\001\002\000\004\004" +
    "\032\001\002\000\004\007\033\001\002\000\004\004\034" +
    "\001\002\000\006\017\024\020\025\001\002\000\004\006" +
    "\036\001\002\000\014\011\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\001\002\000\004\012\041\001\002\000\014\011" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\001\002\000\004" +
    "\002\000\001\002\000\004\007\043\001\002\000\004\021" +
    "\044\001\002\000\004\004\045\001\002\000\004\007\046" +
    "\001\002\000\004\004\047\001\002\000\006\017\024\020" +
    "\025\001\002\000\004\006\051\001\002\000\014\011\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\001\002\000\004\007" +
    "\053\001\002\000\004\021\054\001\002\000\004\004\055" +
    "\001\002\000\004\007\056\001\002\000\004\004\057\001" +
    "\002\000\006\017\024\020\025\001\002\000\004\006\061" +
    "\001\002\000\014\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\011\005\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser3$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser3$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser3$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    MovimientoBase movi=new MovimientoBase();
    public String cadena;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        int fil = (s.right)+1;
        int col = (s.left)+1;
        System.out.println("Error Sintáctico en la Línea " + (col) +
        " Columna "+(fil)+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        int fil = (s.right)+1;
        int col = (s.left)+1;
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (col)+ " Columna "+(fil)+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser3$actions {
  private final parser3 parser;

  /** Constructor */
  CUP$parser3$actions(parser3 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action_part00000000(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser3$result;

      /* select the action based on the action number */
      switch (CUP$parser3$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = start_val;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser3$parser.done_parsing();
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= RIni RTra LVALORES RFin RTra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		
        parser.cadena=""+parser.movi.a[0]+""+parser.movi.a[1]+""+parser.movi.a[2]+""+parser.movi.a[3];
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-4)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LVALORES ::= LVALORES VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
    
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LVALORES",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LVALORES ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
    
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LVALORES",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VALOR ::= RMovA Para numerico Rcm com numerico com DIRECCION Parc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		
        parser.movi.a[0]="<(a)("+a+")("+(3*Integer.parseInt(b))+")("+c+")>";
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-8)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALOR ::= RMovB Para numerico Rcm com numerico com DIRECCION Parc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		
        parser.movi.a[1]="<(b)("+a+")("+(3*Integer.parseInt(b))+")("+c+")>";
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-8)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALOR ::= RMovC Para numerico Rcm com numerico com DIRECCION Parc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		
        parser.movi.a[2]="<(c)("+a+")("+(3*Integer.parseInt(b))+")("+c+")>";
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-8)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALOR ::= RMovD Para numerico Rcm com numerico com DIRECCION Parc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		
        parser.movi.a[3]="<(d)("+a+")("+(3*Integer.parseInt(b))+")("+c+")>";
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("VALOR",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-8)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DIRECCION ::= Radelante 
            {
              Integer RESULT =null;
		
        RESULT=1;
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("DIRECCION",1, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DIRECCION ::= Ratras 
            {
              Integer RESULT =null;
		
        RESULT=2;
    
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("DIRECCION",1, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser3$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
              return CUP$parser3$do_action_part00000000(
                               CUP$parser3$act_num,
                               CUP$parser3$parser,
                               CUP$parser3$stack,
                               CUP$parser3$top);
    }
}

}
